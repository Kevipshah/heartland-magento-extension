<?php
    //GET SESSION DATA
    Mage::getSingleton('core/session', array('name'=>'frontend'));
    $_session = Mage::getSingleton('customer/session');
    $_loggedIn = $_session->isLoggedIn();
    $customerStoredCards = Mage::helper('hps_securesubmit')->getStoredCards($_customerId);

    $_code=$this->getMethodCode();
    $_model = Mage::getModel('hps_securesubmit/payment');
    $public_key = $_model->getConfigData('publicapikey');
?>
<ul class="form-list" id="payment_form_<?php echo $_code ?>" style="display:none">
    <?php if($_loggedIn && count($customerStoredCards)): ?>
    <li>
        <label for="<?php echo $_code ?>_stored_card_checkbox">&nbsp;<?php echo $this->__('Use a stored card') ?></label>
        <div class="input-box">
            <input type="checkbox" id="<?php echo $_code ?>_stored_card_checkbox" />
        </div>
    </li>
    <li id="<?php echo $_code ?>_stored_cards" style="display: none">
        <label for="<?php echo $_code ?>_stored_card_select">&nbsp;<?php echo $this->__('Stored Card') ?></label>
        <div class="input-box">
            <select id="<?php echo $_code ?>_stored_card_select"  autocomplete="off">
            <?php foreach ($customerStoredCards as $key => $card): ?>
                <option value="<?= $card->getTokenValue() ?>"><?= $card->getCcType().' ************'.$card->getCcLast4().' ('.$card->getCcExpYear().'/'.$card->getCcExpMonth().')' ?></option>
            <?php endforeach ?>
            </select>
        </div>
    </li>
    <?php endif ?>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_number"><?php echo $this->__('Credit Card Number') ?> <span class="required">*</span></label>
        <div class="input-box">
            <input type="text" id="<?php echo $_code ?>_cc_number" title="<?php echo $this->__('Credit Card Number') ?>" class="input-text validate-cc-number validate-cc-type" value="" autocomplete="off" />
            <input type="hidden" id="<?php echo $_code ?>_token" name="payment[securesubmit_token]" value="">
            <input type="hidden" id="<?php echo $_code ?>_cc_last_four" name="payment[cc_last_four]" value="">
        </div>
    </li>  
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_expiration"><?php echo $this->__('Expiration Date') ?> <span class="required">*</span></label>
        <div class="input-box">
            <div class="v-fix">
                <select id="<?php echo $_code ?>_expiration" name="payment[cc_exp_month]" class="month required-entry validate-cc-exp"  autocomplete="off">
                <?php $_ccExpMonth = $this->getInfoData('cc_exp_month') ?>
                <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>" <?php if($k==$_ccExpMonth): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
            </div>  
            <div class="v-fix">  
                <select id="<?php echo $_code ?>_expiration_yr" name="payment[cc_exp_year]" class="year required-entry"  autocomplete="off">
                <?php foreach ($this->getCcYears() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>" <?php if($k==$this->getInfoData('cc_exp_year')):?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
            </div>  
        </div>  
    </li>  
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_cid"><?php echo $this->__('Card Verification Number') ?> <span class="required">*</span></label>
        <div class="input-box">
            <div class="v-fix">
                <input type="text" title="<?php echo $this->__('Card Verification Number') ?>" class="cvv required-entry input-text validate-cc-cvn" id="<?php echo $_code ?>_cc_cid" value="" autocomplete="off" />
            </div>
            <a href="#" class="cvv-what-is-this"><?php echo $this->__('What is this?') ?></a>
        </div>  
    </li>
    <?php if ($_loggedIn && $public_key): ?>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_save_future"><?php echo $this->__('Save this card for future use?') ?></label>
        <div class="input-box">
            <input type="checkbox" id="<?php echo $_code ?>_cc_save_future" name="payment[cc_save_future]" value="Y" autocomplete="off" />
        </div>
    </li>
    <?php endif ?>
</ul>

<script type="text/javascript">
//<![CDATA[
<?php if($_loggedIn && count($customerStoredCards)): ?>
    $('<?php echo $_code ?>_stored_card_checkbox').observe('click',function() {
        $$('.stored_cards_selected').invoke('toggle');
        $('<?php echo $_code ?>_stored_cards').toggle();
        $('<?php echo $_code ?>_cc_number').toggleClassName('validate-cc-number');
    });
<?php endif ?>

Payment.prototype._secureSubmitOldSave = Payment.prototype.save;
Object.extend(Payment.prototype, {
    save: function() {
        if (this.currentMethod == '<?php echo $_code ?>') {
            if (checkout.loadWaiting != false) return;

            // Use stored card checked, get existing token data
            var storedCheckbox = $("<?php echo $_code ?>_stored_card_checkbox");
            if (storedCheckbox && storedCheckbox.checked) {
                var url = "<?php echo Mage::getUrl('securesubmit/storedcard/getTokenData') ?>";
                var tokenValue = $('<?php echo $_code ?>_stored_card_select').value;
                new Ajax.Request(url, {
                    method: 'post',
                    parameters: {token_value: tokenValue},
                    onSuccess: function(response){
                        $("<?php echo $_code ?>_expiration").value = response.cc_exp_month;
                        $("<?php echo $_code ?>_expiration_yr").value = response.cc_exp_year;
                        this.secureSubmitResponseHandler({
                            token_value:  tokenValue,
                            token_type:   'supt',
                            token_expire: new Date().toISOString(),
                            card:         {
                                number: response.cc_last4
                            }
                        });
                    }.bind(this)
                });
            }
            // Use stored card not checked, get new token
            else {
                var validator = new Validation(this.form);
                if (this.validate() && validator.validate()) {
                    checkout.setLoadWaiting('payment');

                    hps.tokenize({
                        data: {
                            public_key: '<?php echo $public_key ?>',
                            number: $('<?php echo $_code ?>_cc_number').value,
                            cvc: $('<?php echo $_code ?>_cc_cid').value,
                            exp_month: $('<?php echo $_code ?>_expiration').value,
                            exp_year: $('<?php echo $_code ?>_expiration_yr').value
                        },
                        success: this.secureSubmitResponseHandler.bind(this),
                        error: this.secureSubmitResponseHandler.bind(this)
                    });
                }
            }
        } else {
            this._secureSubmitOldSave();
        }
    },
    secureSubmitResponseHandler: function (response) {
        if (response && response.error) {
            if (response.message) {
                alert(response.message);
            }
            checkout.setLoadWaiting(false);
        } else if (response && response.token_value) {
            $('<?php echo $_code ?>_token').value = response.token_value;
            $('<?php echo $_code ?>_cc_last_four').value = response.card.number.substr(-4);

            // Continue Magento checkout steps
            new Ajax.Request(this.saveUrl, {
                method:'post',
                onComplete: this.onComplete,
                onSuccess: this.onSave,
                onFailure: checkout.ajaxFailure.bind(checkout),
                parameters: Form.serialize(this.form)
            });
        } else {
            alert('Unexpected error.')
        }
    }
});
//]]>
</script>
